        -:    0:Source:expenses.cpp
        -:    0:Graph:expenses.gcno
        -:    0:Data:expenses.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include <fstream>
        -:    3:#include <iomanip>
        -:    4:#include <vector>
        -:    5:#include <cmath>
        -:    6:#include <string>
        -:    7:#include "../include/rapidcsv.h"
        -:    8:
        -:    9:using namespace std;
        -:   10:
        -:   11:/* this program takes csv containing monthly expenses
        -:   12:from given csv containing monthly expenses per category line item and
        -:   13:calculates the average monthly cost of an expense per category.
        -:   14:Also calculates the average monthly overall cost. */
        -:   15:
        -:   16:
function main called 2 returned 100% blocks executed 67%
        -:   17:int main(int argc,char* argv[])
        -:   18:    {
        2:   19:        float sum,ave,totalAve = 0;
        -:   20:        try{ //using csv parser library, rapidcsv.h. this doc fcn uses input stream ifstream to open and read csv, and will throw an iostream exception if the stream has failbit or badbit set to true. Note that i set it to skip empty lines and accept $ char.
        -:   21:
        2:   22:            rapidcsv::Document doc( argv[1],
        2:   22-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:   22-block  1
branch  2 taken 100%
branch  3 taken 0%
    $$$$$:   22-block  2
        2:   23:            rapidcsv::LabelParams(0, 0),
        2:   23-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:   24:            rapidcsv::SeparatorParams() /* default is comma*/,
        2:   24-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:   25:            rapidcsv::ConverterParams(),
        2:   25-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:   26:            rapidcsv::LineReaderParams(true /* SkipCommentLines */,
        2:   26-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   27:                                        '/' /* CommentPrefix */,
        -:   28:                                        true /* SkipEmptyLines */));
        -:   29:
        2:   30:            vector<string> col= doc.GetColumnNames();
        2:   30-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:   31:            //checking to make sure no additional column headers were added
        2:   32:            if (col.size()>12){//actually contains 13 columns, but csv lib does not count first column since it is considered part of row header
        2:   32-block  0
branch  0 taken 50%
branch  1 taken 50%
        1:   33:                cerr<<"Column headers out of range --resizing to 13 columns, Must keep format intact where 1st column is for Expense Category, followed by a column for each month"<<endl;
        1:   33-block  0
branch  0 taken 100%
branch  1 taken 0%
        1:   33-block  1
branch  2 taken 100%
branch  3 taken 0%
        1:   34:                col.resize(12);
        1:   34-block  0
branch  0 taken 100%
branch  1 taken 0%
        1:   35:            }
        1:   35-block  0
        2:   36:            vector<string> row = doc.GetRowNames();
        2:   36-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:   37:            /*create vector for each row of float values in csv
        -:   38:                    empty fields will be treated as 0, improper format will be caught by invalid_arg exception */
       15:   39:            for (unsigned i=0; i< row.size();i++){
        2:   39-block  0
       15:   39-block  1
branch  0 taken 93%
branch  1 taken 7%
       13:   39-block  2
       14:   40:                vector<float> cost(12);cost =doc.GetRow<float>(row.at(i));
       14:   40-block  0
branch  0 taken 100%
branch  1 taken 0%
       14:   40-block  1
branch  2 taken 100%
branch  3 taken 0%
       14:   40-block  2
branch  4 taken 93%
branch  5 taken 7%
        -:   41:
       13:   42:                if(cost.size()>12){//instead of throwing custom exception msg to end program, sending error msg and continuing program to output remaining calculations.
       13:   42-block  0
branch  0 taken 8%
branch  1 taken 92%
        1:   43:                    cerr<<"Out of Range: Need to remove extra items in row:"<<row.at(i)<<". Resizing row to only calculate average of first 12 values"<<endl;
        1:   43-block  0
branch  0 taken 100%
branch  1 taken 0%
        1:   43-block  1
branch  2 taken 100%
branch  3 taken 0%
        1:   43-block  2
branch  4 taken 100%
branch  5 taken 0%
        1:   43-block  3
branch  6 taken 100%
branch  7 taken 0%
        1:   43-block  4
branch  8 taken 100%
branch  9 taken 0%
        1:   44:                    cost.resize(12);
        1:   44-block  0
branch  0 taken 100%
branch  1 taken 0%
        1:   45:                }
        1:   45-block  0
        -:   46:                // traverse vector to calculate sum and average for each row line item
      169:   47:                for (unsigned j=0; j<cost.size(); j++){
       13:   47-block  0
      169:   47-block  1
branch  0 taken 92%
branch  1 taken 8%
      156:   47-block  2
        -:   48:                    //this exception already caught by vector constructor aasignment so is no longer needed.
        -:   49:                    // if(cost.at(j)==NAN) throw i;
      156:   50:                    sum += cost.at(j);
      156:   50-block  0
branch  0 taken 0%
branch  1 taken 100%
      156:   51:                }//end inner for loop
      156:   51-block  0
       13:   52:                ave = sum/12;
       13:   53:                cout<<" Average monthly expense for "<< row.at(i) << " is $" << fixed<< setprecision(2)<< ave << endl;
       13:   53-block  0
branch  0 taken 0%
branch  1 taken 100%
       13:   53-block  1
branch  2 taken 0%
branch  3 taken 100%
       13:   53-block  2
branch  4 taken 0%
branch  5 taken 100%
       13:   53-block  3
branch  6 taken 0%
branch  7 taken 100%
       13:   53-block  4
branch  8 taken 0%
branch  9 taken 100%
       13:   53-block  5
branch 10 taken 0%
branch 11 taken 100%
       13:   53-block  6
branch 12 taken 0%
branch 13 taken 100%
       13:   53-block  7
branch 14 taken 0%
branch 15 taken 100%
       13:   53-block  8
branch 16 taken 0%
branch 17 taken 100%
        -:   54:                //aggregate each line item average to get average monthly total for all expenses
       13:   55:                totalAve += ave;
       13:   56:                sum = 0; //reset sum for next row
       13:   57:            }//end outer for loop
        1:   57-block  0
       13:   57-block  1
        1:   58:            cout << "Total monthly average cost for all expenses is $ " << totalAve  << "." << endl;
        1:   58-block  0
branch  0 taken 0%
branch  1 taken 100%
        1:   58-block  1
branch  2 taken 0%
branch  3 taken 100%
        1:   58-block  2
branch  4 taken 0%
branch  5 taken 100%
        1:   58-block  3
branch  6 taken 0%
branch  7 taken 100%
        1:   59:    }//end try
        1:   59-block  0
        1:   59-block  1
        1:   59-block  2
        1:   59-block  3
        1:   59-block  4
branch  0 taken 0%
branch  1 taken 100%
        1:   59-block  5
branch  2 taken 100%
branch  3 taken 0%
    $$$$$:   59-block  6
branch  4 never executed
branch  5 never executed
    $$$$$:   59-block  7
        -:   60:
        -:   61:
        -:   62:    catch(const ios_base::failure& io_err){
    #####:   63:         cerr << "error: Unable to open file: " << argv[1] <<". Please try again using correct filename and path."<< endl<<"Usage:"<<argv[0]<<" <filename>"<<endl;
    $$$$$:   63-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   63-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   63-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:   63-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:   63-block  4
branch  8 never executed
branch  9 never executed
    $$$$$:   63-block  5
branch 10 never executed
branch 11 never executed
    $$$$$:   63-block  6
branch 12 never executed
branch 13 never executed
    $$$$$:   63-block  7
branch 14 never executed
branch 15 never executed
    #####:   64:        cerr<<" iostream error reading file: "<< io_err.what();
    $$$$$:   64-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   64-block  1
branch  2 never executed
branch  3 never executed
    #####:   65:    }
    $$$$$:   65-block  0
    $$$$$:   65-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   65-block  2
        -:   66:
        -:   67:    catch(const invalid_argument& inv_err){
        1:   68:        cerr<<"Error: "<< inv_err.what()<<".  Incorrect data entered in csv file! Please correct and rerun program. Only enter numbers without any symbols or characters for each expense amount"<< endl;
        1:   68-block  0
branch  0 taken 100%
branch  1 taken 0%
        1:   68-block  1
branch  2 taken 100%
branch  3 taken 0%
        1:   68-block  2
branch  4 taken 100%
branch  5 taken 0%
        1:   68-block  3
branch  6 taken 100%
branch  7 taken 0%
        -:   69:
        1:   70:    }
        1:   70-block  0
    $$$$$:   70-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   70-block  2
        -:   71:
        -:   72:    // commenting out this exception. Since rapidscsv library ingests row into resizable vectors, GetRow and GetCol functions won't allow params to restrict length of output vector. So instead chose to output custom out of range messages, which will also allow option to continue with program instead of breaking loop.
        -:   73:       catch(const out_of_range& e){
    #####:   74:            cerr<<"Error: data in incorrect field in csv! "<<e.what() <<  endl;
    $$$$$:   74-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   74-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   74-block  2
branch  4 never executed
branch  5 never executed
        1:   75:        }
    $$$$$:   75-block  0
    $$$$$:   75-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   75-block  2
    $$$$$:   75-block  3
        -:   76:
        2:   77:    return 0;
        2:   77-block  0
        1:   78:}
    $$$$$:   78-block  0
    $$$$$:   78-block  1
    $$$$$:   78-block  2
    $$$$$:   78-block  3
